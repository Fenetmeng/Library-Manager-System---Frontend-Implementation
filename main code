// 
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// 
import React from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import LoginPage from "./pages/LoginPage";
import Dashboard from "./pages/Dashboard";
import BooksPage from "./pages/BooksPage";
import MembersPage from "./pages/MembersPage";
import GenresPage from "./pages/GenresPage";
import BorrowPage from "./pages/BorrowPage";
import ReturnPage from "./pages/ReturnPage";
import { AuthProvider } from "./hooks/useAuth";

function App() {
  return (
    <AuthProvider>
      <Router>
        <Routes>
          <Route path="/" element={<LoginPage />} />
          <Route path="/dashboard" element={<Dashboard />} />
          <Route path="/books" element={<BooksPage />} />
          <Route path="/members" element={<MembersPage />} />
          <Route path="/genres" element={<GenresPage />} />
          <Route path="/borrow" element={<BorrowPage />} />
          <Route path="/return" element={<ReturnPage />} />
        </Routes>
      </Router>
    </AuthProvider>
  );
}

export default App;

// 
import axios from "axios";

const API = axios.create({
  baseURL: "http://localhost:3000",
});

API.interceptors.request.use((config) => {
  const token = localStorage.getItem("token");
  if (token) config.headers.Authorization = `Bearer ${token}`;
  return config;
});

export default API;

// 
import { createContext, useContext, useState, useEffect } from "react";
import jwtDecode from "jwt-decode";

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      try {
        const decoded = jwtDecode(token);
        setUser(decoded);
      } catch (e) {
        console.error("Invalid token");
      }
    }
  }, 

  const login = (token) => {
    localStorage.setItem("token", token);
    setUser(jwtDecode(token));
  };

  const logout = () => {
    localStorage.removeItem("token");
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);

//
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import API from "../api";
import { useAuth } from "../hooks/useAuth";

const LoginPage = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const res = await API.post("/auth/login", { username, password });
      login(res.data.access_token);
      navigate("/dashboard");
    } catch (err) {
      alert("Login failed");
    }
  };

  return (
    <div>
      <h2>Login</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit">Login</button>
      </form>
    </div>
  );
};

export default LoginPage;

// 
import React, { useEffect, useState } from "react";
import API from "../api";

const Dashboard = () => {
  const [stats, setStats] = useState({ books: 0, members: 0, borrows: 0, overdue: 0 });

  useEffect(() => {
    const fetchStats = async () => {
      const books = await API.get("/books");
      const members = await API.get("/members");
      const borrows = await API.get("/borrows");
      const overdue = await API.get("/borrows/overdue");
      setStats({
        books: books.data.length,
        members: members.data.length,
        borrows: borrows.data.length,
        overdue: overdue.data.length,
      });
    };
    fetchStats();
  }, []);

  return (
    <div>
      <h2>Dashboard</h2>
      <p>Total Books: {stats.books}</p>
      <p>Total Members: {stats.members}</p>
      <p>Active Borrows: {stats.borrows}</p>
      <p>Overdue Books: {stats.overdue}</p>
    </div>
  );
};

export default Dashboard;

//
import React, { useEffect, useState } from "react";
import API from "../api";

const BooksPage = () => {
  const [books, setBooks] = useState([]);
  const [search, setSearch] = useState("");

  useEffect(() => {
    API.get("/books").then((res) => setBooks(res.data));
  }, []);

  const filteredBooks = books.filter((book) =>
    book.title.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <div>
      <h2>Books</h2>
      <input
        type="text"
        placeholder="Search books..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
      />
      <ul>
        {filteredBooks.map((book) => (
          <li key={book.id}>{book.title} - {book.author} ({book.availableCopies} copies)</li>
        ))}
      </ul>
    </div>
  );
};

export default BooksPage;

//
import React, { useEffect, useState } from "react";
import API from "../api";

const MembersPage = () => {
  const [members, setMembers] = useState([]);
  const [search, setSearch] = useState("");

  useEffect(() => {
    API.get("/members").then((res) => setMembers(res.data));
  }, []);

  const filteredMembers = members.filter((m) =>
    m.name.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <div>
      <h2>Members</h2>
      <input
        type="text"
        placeholder="Search members..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
      />
      <ul>
        {filteredMembers.map((member) => (
          <li key={member.id}>{member.name} - {member.email}</li>
        ))}
      </ul>
    </div>
  );
};

export default MembersPage;

// 
import React, { useEffect, useState } from "react";
import API from "../api";

const GenresPage = () => {
  const [genres, setGenres] = useState([]);
  const [newGenre, setNewGenre] = useState("");

  useEffect(() => {
    API.get("/genres").then((res) => setGenres(res.data));
  }, []);

  const addGenre = async () => {
    const res = await API.post("/genres", { name: newGenre });
    setGenres([...genres, res.data]);
    setNewGenre("");
  };

  return (
    <div>
      <h2>Genres</h2>
      <input
        type="text"
        placeholder="New genre"
        value={newGenre}
        onChange={(e) => setNewGenre(e.target.value)}
      />
      <button onClick={addGenre}>Add Genre</button>
      <ul>
        {genres.map((genre) => (
          <li key={genre.id}>{genre.name}</li>
        ))}
      </ul>
    </div>
  );
};

export default GenresPage;

// 
import React, { useEffect, useState } from "react";
import API from "../api";

const BorrowPage = () => {
  const [books, setBooks] = useState([]);
  const [members, setMembers] = useState([]);
  const [bookId, setBookId] = useState("");
  const [memberId, setMemberId] = useState("");
  const [dueDate, setDueDate] = useState("");

  useEffect(() => {
    API.get("/books").then((res) => setBooks(res.data));
    API.get("/members").then((res) => setMembers(res.data));
  }, []);

  const borrowBook = async () => {
    try {
      await API.post("/borrows", { bookId, memberId, dueDate });
      alert("Book borrowed successfully");
    } catch (err) {
      alert("Borrow failed");
    }
  };

  return (
    <div>
      <h2>Borrow Book</h2>
      <select onChange={(e) => setBookId(e.target.value)} value={bookId}>
        <option value="">Select Book</option>
        {books.map((book) => (
          <option key={book.id} value={book.id}>{book.title}</option>
        ))}
      </select>
      <select onChange={(e) => setMemberId(e.target.value)} value={memberId}>
        <option value="">Select Member</option>
        {members.map((member) => (
          <option key={member.id} value={member.id}>{member.name}</option>
        ))}
      </select>
      <input type="date" value={dueDate} onChange={(e) => setDueDate(e.target.value)} />
      <button onClick={borrowBook}>Borrow</button>
    </div>
  );
};

export default BorrowPage;

//
import React, { useEffect, useState } from "react";
import API from "../api";

const ReturnPage = () => {
  const [borrows, setBorrows] = useState([]);
  const [borrowId, setBorrowId] = useState("");

  useEffect(() => {
    API.get("/borrows").then((res) => setBorrows(res.data));
  }, []);

  const returnBook = async () => {
    try {
      await API.patch(`/borrows/${borrowId}/return`);
      alert("Book returned successfully");
    } catch (err) {
      alert("Return failed");
    }
  };

  return (
    <div>
      <h2>Return Book</h2>
      <select value={borrowId} onChange={(e) => setBorrowId(e.target.value)}>
        <option value="">Select Borrow</option>
        {borrows.map((b) => (
          <option key={b.id} value={b.id}>{b.book.title} - {b.member.name}</option>
        ))}
      </select>
      <button onClick={returnBook}>Return</button>
    </div>
  );
};

 Return;0
